YaST++
------

Long term goal:
--------------

Replace whole YaST with better tool, using up-to-date techonology.
Provide clean, understandable and common API for system configuration related tasks: not only for YaST

Current WebYaST state is limited to replacing backend part of YaST.
For rewriting whole YaST into new language, refer to Amaranth project.


Main advantages of YaST++ compared to YaST:
------------------------------------------

1. Using modern and well-known language
  
   We chose ruby mostly because of
   	  - wide user community
	  - good testing framework 
	  - good knowldeadge inside SUSE

   YaST is mostly written in YCP language, which is not developed any more and is known only to inner circle of initiates.

   Popular language not only helps development, but (primary!) the maintenance.

2. Role based access management

   The architecture uses Policykit to define rights to the configuration tasks and check if current user has such right.

   Architecture backend uses D-Bus services that are actually accessing the system.
   Those services have rights of system administrator (root).

   Only if user is allowed to perform certain task, D-Bus service is started and action is done.


3. Better modularity

   By splitting the business logic part (YLib) from UI (Qt, WWW), modules that borrow functionality from other ones do not need to import(install) their UI.

   In the end, there should be smaller space requirements for situations when only part of YaST++ stack should be installed.


The architecture in short
-------------------------

Look at doc/architecture.svg diagram.

YaST++ consist of two new layers: YLib and Config Agents.

YLib is the public library layer. It provides simple API for those who want to configure the system.
The API consists of these functions

	read ({})	- read function: takes one hash argument and returns hash
	add ({}, {})	-
	modify ({}, {}) -
	delete ({}, {})	- those modify functions take 2 hash argument (first is meant e.g. for object specification,
			  second contains the actual data to be written)
	propose ({})	- propose new confiuration

See https://github.com/yast/yast--/wiki/YLib-Use-Cases for more about YLib API.

The Config Agent is working with the system, by which we mean it either modifies files or runs the scripts.
There are 2 kinds of Config Agents, File Agents handle files, Script Agents are running the scripts.

There are 2 defined policies for File Agents (rights to read and write) and one for Script Agents (right to execute).

The implementation of Config Agents should very simple, basically File Agents only parse the file they manage and return its structure as hash (for read command) and write the new contents in case of write command. Script Agent just executes its script with the given arguments. Config Agents do not have the knowleadge about the semantics of the data, this is the task of YLib library.

Using YaST++
------------

    YLib can be imported for any ruby code, see

       yast++lib-kerberos-client/examples/kerberos_conf for an example

    YLib can be directly used from current YaST modules using yast2-ruby-bindings.
    See 
    	yast++lib-kerberos-client/examples/kerberos-example.ycp for simple example of calling YLib

	yast--/yast/kerberos-client for whole YaST module where system access is replaced with YLib calls

    In mid-term, we want to replace Read/Write calls of YaST modules by YLib calls.


    TODO: usage from WebYaST


The architecture in details
---------------------------

What YLib developer needs to do
-------------------------------

What Config Agent developer needs to do
---------------------------------------

Defining Policies 
-----------------

    See doc/org.opensuse.config_agent.pkla for example of policy config file.

